/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthHeaderImport } from './routes/_auth/_header'
import { Route as AuthHeaderIndexImport } from './routes/_auth/_header/index'
import { Route as AuthHeaderSearchImport } from './routes/_auth/_header/search'
import { Route as AuthHeaderBooksSeriesImport } from './routes/_auth/_header/books/series'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthHeaderRoute = AuthHeaderImport.update({
  id: '/_header',
  getParentRoute: () => AuthRoute,
} as any)

const AuthHeaderIndexRoute = AuthHeaderIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthHeaderRoute,
} as any)

const AuthHeaderSearchRoute = AuthHeaderSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AuthHeaderRoute,
} as any)

const AuthHeaderBooksSeriesRoute = AuthHeaderBooksSeriesImport.update({
  id: '/books/series',
  path: '/books/series',
  getParentRoute: () => AuthHeaderRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_header': {
      id: '/_auth/_header'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthHeaderImport
      parentRoute: typeof AuthImport
    }
    '/_auth/_header/search': {
      id: '/_auth/_header/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AuthHeaderSearchImport
      parentRoute: typeof AuthHeaderImport
    }
    '/_auth/_header/': {
      id: '/_auth/_header/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthHeaderIndexImport
      parentRoute: typeof AuthHeaderImport
    }
    '/_auth/_header/books/series': {
      id: '/_auth/_header/books/series'
      path: '/books/series'
      fullPath: '/books/series'
      preLoaderRoute: typeof AuthHeaderBooksSeriesImport
      parentRoute: typeof AuthHeaderImport
    }
  }
}

// Create and export the route tree

interface AuthHeaderRouteChildren {
  AuthHeaderSearchRoute: typeof AuthHeaderSearchRoute
  AuthHeaderIndexRoute: typeof AuthHeaderIndexRoute
  AuthHeaderBooksSeriesRoute: typeof AuthHeaderBooksSeriesRoute
}

const AuthHeaderRouteChildren: AuthHeaderRouteChildren = {
  AuthHeaderSearchRoute: AuthHeaderSearchRoute,
  AuthHeaderIndexRoute: AuthHeaderIndexRoute,
  AuthHeaderBooksSeriesRoute: AuthHeaderBooksSeriesRoute,
}

const AuthHeaderRouteWithChildren = AuthHeaderRoute._addFileChildren(
  AuthHeaderRouteChildren,
)

interface AuthRouteChildren {
  AuthHeaderRoute: typeof AuthHeaderRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthHeaderRoute: AuthHeaderRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthHeaderRouteWithChildren
  '/login': typeof LoginRoute
  '/search': typeof AuthHeaderSearchRoute
  '/': typeof AuthHeaderIndexRoute
  '/books/series': typeof AuthHeaderBooksSeriesRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/search': typeof AuthHeaderSearchRoute
  '/': typeof AuthHeaderIndexRoute
  '/books/series': typeof AuthHeaderBooksSeriesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/_header': typeof AuthHeaderRouteWithChildren
  '/_auth/_header/search': typeof AuthHeaderSearchRoute
  '/_auth/_header/': typeof AuthHeaderIndexRoute
  '/_auth/_header/books/series': typeof AuthHeaderBooksSeriesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/search' | '/' | '/books/series'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/search' | '/' | '/books/series'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/_auth/_header'
    | '/_auth/_header/search'
    | '/_auth/_header/'
    | '/_auth/_header/books/series'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/_header"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/_header": {
      "filePath": "_auth/_header.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/_header/search",
        "/_auth/_header/",
        "/_auth/_header/books/series"
      ]
    },
    "/_auth/_header/search": {
      "filePath": "_auth/_header/search.tsx",
      "parent": "/_auth/_header"
    },
    "/_auth/_header/": {
      "filePath": "_auth/_header/index.tsx",
      "parent": "/_auth/_header"
    },
    "/_auth/_header/books/series": {
      "filePath": "_auth/_header/books/series.tsx",
      "parent": "/_auth/_header"
    }
  }
}
ROUTE_MANIFEST_END */
